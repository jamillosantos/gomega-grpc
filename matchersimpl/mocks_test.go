// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamillosantos/gomega-grpc/matchersimpl (interfaces: StatusMatcher,ErrorInfoMatcher,BadRequestMatcher)

// Package matchersimpl is a generated GoMock package.
package matchersimpl

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	errdetails "google.golang.org/genproto/googleapis/rpc/errdetails"
	status "google.golang.org/grpc/status"
)

// MockStatusMatcher is a mock of StatusMatcher interface.
type MockStatusMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockStatusMatcherMockRecorder
}

// MockStatusMatcherMockRecorder is the mock recorder for MockStatusMatcher.
type MockStatusMatcherMockRecorder struct {
	mock *MockStatusMatcher
}

// NewMockStatusMatcher creates a new mock instance.
func NewMockStatusMatcher(ctrl *gomock.Controller) *MockStatusMatcher {
	mock := &MockStatusMatcher{ctrl: ctrl}
	mock.recorder = &MockStatusMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusMatcher) EXPECT() *MockStatusMatcherMockRecorder {
	return m.recorder
}

// FailureMessage mocks base method.
func (m *MockStatusMatcher) FailureMessage(arg0 *status.Status) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailureMessage", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// FailureMessage indicates an expected call of FailureMessage.
func (mr *MockStatusMatcherMockRecorder) FailureMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailureMessage", reflect.TypeOf((*MockStatusMatcher)(nil).FailureMessage), arg0)
}

// Match mocks base method.
func (m *MockStatusMatcher) Match(arg0 *status.Status) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Match indicates an expected call of Match.
func (mr *MockStatusMatcherMockRecorder) Match(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockStatusMatcher)(nil).Match), arg0)
}

// NegatedFailureMessage mocks base method.
func (m *MockStatusMatcher) NegatedFailureMessage(arg0 *status.Status) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NegatedFailureMessage", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// NegatedFailureMessage indicates an expected call of NegatedFailureMessage.
func (mr *MockStatusMatcherMockRecorder) NegatedFailureMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NegatedFailureMessage", reflect.TypeOf((*MockStatusMatcher)(nil).NegatedFailureMessage), arg0)
}

// MockErrorInfoMatcher is a mock of ErrorInfoMatcher interface.
type MockErrorInfoMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockErrorInfoMatcherMockRecorder
}

// MockErrorInfoMatcherMockRecorder is the mock recorder for MockErrorInfoMatcher.
type MockErrorInfoMatcherMockRecorder struct {
	mock *MockErrorInfoMatcher
}

// NewMockErrorInfoMatcher creates a new mock instance.
func NewMockErrorInfoMatcher(ctrl *gomock.Controller) *MockErrorInfoMatcher {
	mock := &MockErrorInfoMatcher{ctrl: ctrl}
	mock.recorder = &MockErrorInfoMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorInfoMatcher) EXPECT() *MockErrorInfoMatcherMockRecorder {
	return m.recorder
}

// FailureMessage mocks base method.
func (m *MockErrorInfoMatcher) FailureMessage(arg0 *errdetails.ErrorInfo) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailureMessage", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// FailureMessage indicates an expected call of FailureMessage.
func (mr *MockErrorInfoMatcherMockRecorder) FailureMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailureMessage", reflect.TypeOf((*MockErrorInfoMatcher)(nil).FailureMessage), arg0)
}

// Match mocks base method.
func (m *MockErrorInfoMatcher) Match(arg0 *errdetails.ErrorInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Match indicates an expected call of Match.
func (mr *MockErrorInfoMatcherMockRecorder) Match(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockErrorInfoMatcher)(nil).Match), arg0)
}

// NegatedFailureMessage mocks base method.
func (m *MockErrorInfoMatcher) NegatedFailureMessage(arg0 *errdetails.ErrorInfo) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NegatedFailureMessage", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// NegatedFailureMessage indicates an expected call of NegatedFailureMessage.
func (mr *MockErrorInfoMatcherMockRecorder) NegatedFailureMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NegatedFailureMessage", reflect.TypeOf((*MockErrorInfoMatcher)(nil).NegatedFailureMessage), arg0)
}

// MockBadRequestMatcher is a mock of BadRequestMatcher interface.
type MockBadRequestMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockBadRequestMatcherMockRecorder
}

// MockBadRequestMatcherMockRecorder is the mock recorder for MockBadRequestMatcher.
type MockBadRequestMatcherMockRecorder struct {
	mock *MockBadRequestMatcher
}

// NewMockBadRequestMatcher creates a new mock instance.
func NewMockBadRequestMatcher(ctrl *gomock.Controller) *MockBadRequestMatcher {
	mock := &MockBadRequestMatcher{ctrl: ctrl}
	mock.recorder = &MockBadRequestMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBadRequestMatcher) EXPECT() *MockBadRequestMatcherMockRecorder {
	return m.recorder
}

// FailureMessage mocks base method.
func (m *MockBadRequestMatcher) FailureMessage(arg0 *errdetails.BadRequest) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FailureMessage", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// FailureMessage indicates an expected call of FailureMessage.
func (mr *MockBadRequestMatcherMockRecorder) FailureMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FailureMessage", reflect.TypeOf((*MockBadRequestMatcher)(nil).FailureMessage), arg0)
}

// Match mocks base method.
func (m *MockBadRequestMatcher) Match(arg0 *errdetails.BadRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Match indicates an expected call of Match.
func (mr *MockBadRequestMatcherMockRecorder) Match(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockBadRequestMatcher)(nil).Match), arg0)
}

// NegatedFailureMessage mocks base method.
func (m *MockBadRequestMatcher) NegatedFailureMessage(arg0 *errdetails.BadRequest) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NegatedFailureMessage", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// NegatedFailureMessage indicates an expected call of NegatedFailureMessage.
func (mr *MockBadRequestMatcherMockRecorder) NegatedFailureMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NegatedFailureMessage", reflect.TypeOf((*MockBadRequestMatcher)(nil).NegatedFailureMessage), arg0)
}
